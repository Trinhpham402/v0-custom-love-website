"use client"

import { useState, useEffect, useRef } from "react"
import { Volume2, VolumeX, Music, Play, Pause, AlertCircle } from "lucide-react"

export default function MusicPlayer() {
  const [isMuted, setIsMuted] = useState(false)
  const [isPlaying, setIsPlaying] = useState(false)
  const [hasMusic, setHasMusic] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const audioRef = useRef<HTMLAudioElement | null>(null)

  useEffect(() => {
    const checkAndLoadMusic = async () => {
      try {
        // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng b·∫±ng fetch
        console.log("üîç ƒêang ki·ªÉm tra file nh·∫°c...")
        const response = await fetch("/music/background-music.mp3", {
          method: "HEAD",
          cache: "no-cache",
        })

        if (!response.ok) {
          throw new Error(`File kh√¥ng t·ªìn t·∫°i (${response.status})`)
        }

        console.log("‚úÖ File nh·∫°c t·ªìn t·∫°i, ƒëang t·∫£i...")

        // T·∫°o audio element
        const audio = new Audio()
        audio.preload = "auto"
        audio.loop = true
        audio.volume = 0.3
        audio.crossOrigin = "anonymous"
        audioRef.current = audio

        // Promise ƒë·ªÉ theo d√µi vi·ªác t·∫£i
        const loadPromise = new Promise<void>((resolve, reject) => {
          const timeout = setTimeout(() => {
            reject(new Error("Timeout - File t·∫£i qu√° l√¢u"))
          }, 10000) // 10 gi√¢y timeout

          audio.addEventListener("canplaythrough", () => {
            clearTimeout(timeout)
            console.log("‚úÖ Nh·∫°c ƒë√£ t·∫£i th√†nh c√¥ng!")
            setHasMusic(true)
            setError(null)
            resolve()
          })

          audio.addEventListener("error", (e) => {
            clearTimeout(timeout)
            console.error("‚ùå L·ªói audio element:", e)
            reject(new Error("Kh√¥ng th·ªÉ t·∫£i file nh·∫°c"))
          })
        })

        // ƒê·∫∑t src v√† b·∫Øt ƒë·∫ßu t·∫£i
        audio.src = "/music/background-music.mp3?" + Date.now() // Cache busting
        audio.load()

        await loadPromise

        // Th√™m event listeners
        audio.addEventListener("play", () => setIsPlaying(true))
        audio.addEventListener("pause", () => setIsPlaying(false))
        audio.addEventListener("ended", () => setIsPlaying(false))
      } catch (err) {
        console.error("‚ùå L·ªói:", err)
        setError(err instanceof Error ? err.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh")
        setHasMusic(false)
      } finally {
        setIsLoading(false)
      }
    }

    checkAndLoadMusic()

    return () => {
      if (audioRef.current) {
        audioRef.current.pause()
        audioRef.current.src = ""
        audioRef.current = null
      }
    }
  }, [])

  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.muted = isMuted
    }
  }, [isMuted])

  const toggleMusic = async () => {
    if (!hasMusic || !audioRef.current) return

    try {
      if (isPlaying) {
        audioRef.current.pause()
      } else {
        await audioRef.current.play()
      }
    } catch (error) {
      console.error("L·ªói ph√°t nh·∫°c:", error)
      setError("Kh√¥ng th·ªÉ ph√°t nh·∫°c")
    }
  }

  const toggleMute = () => {
    setIsMuted(!isMuted)
  }

  const retryLoadMusic = () => {
    setIsLoading(true)
    setError(null)
    window.location.reload() // Reload trang ƒë·ªÉ th·ª≠ l·∫°i
  }

  // Auto-play khi user t∆∞∆°ng t√°c l·∫ßn ƒë·∫ßu
  useEffect(() => {
    const handleFirstInteraction = async () => {
      if (hasMusic && audioRef.current && !isPlaying) {
        try {
          await audioRef.current.play()
          console.log("üéµ T·ª± ƒë·ªông ph√°t nh·∫°c th√†nh c√¥ng")
        } catch (error) {
          console.log("T·ª± ƒë·ªông ph√°t nh·∫°c th·∫•t b·∫°i, c·∫ßn nh·∫•n n√∫t play")
        }
      }
      document.removeEventListener("click", handleFirstInteraction)
      document.removeEventListener("touchstart", handleFirstInteraction)
    }

    if (hasMusic) {
      document.addEventListener("click", handleFirstInteraction)
      document.addEventListener("touchstart", handleFirstInteraction)
      return () => {
        document.removeEventListener("click", handleFirstInteraction)
        document.removeEventListener("touchstart", handleFirstInteraction)
      }
    }
  }, [hasMusic, isPlaying])

  // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
  if (isLoading) {
    return (
      <div className="fixed bottom-4 right-4 z-50">
        <div className="bg-pink-500 text-white p-3 rounded-full shadow-lg">
          <Music size={20} className="animate-pulse" />
        </div>
        <div className="absolute bottom-full right-0 mb-2 bg-black text-white text-xs p-2 rounded whitespace-nowrap">
          ƒêang t·∫£i nh·∫°c...
        </div>
      </div>
    )
  }

  // Hi·ªÉn th·ªã l·ªói
  if (error) {
    return (
      <div className="fixed bottom-4 right-4 z-50">
        <div className="bg-red-500 text-white p-3 rounded-full shadow-lg">
          <AlertCircle size={20} />
        </div>
        <div className="absolute bottom-full right-0 mb-2 bg-red-600 text-white text-xs p-3 rounded max-w-xs">
          <div className="font-bold mb-1">L·ªói nh·∫°c:</div>
          <div className="mb-2">{error}</div>
          <div className="text-xs opacity-75 mb-2">Ki·ªÉm tra: public/music/background-music.mp3</div>
          <button
            onClick={retryLoadMusic}
            className="bg-white text-red-600 px-2 py-1 rounded text-xs hover:bg-gray-100"
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    )
  }

  // Kh√¥ng c√≥ nh·∫°c
  if (!hasMusic) {
    return null
  }

  return (
    <div className="fixed bottom-4 right-4 z-50 flex flex-col gap-2">
      {/* N√∫t Play/Pause */}
      <button
        onClick={toggleMusic}
        className={`${
          isPlaying ? "bg-green-500 hover:bg-green-600" : "bg-pink-500 hover:bg-pink-600"
        } text-white p-3 rounded-full shadow-lg transition-colors`}
        aria-label={isPlaying ? "T·∫°m d·ª´ng nh·∫°c" : "Ph√°t nh·∫°c"}
      >
        {isPlaying ? <Pause size={20} /> : <Play size={20} />}
      </button>

      {/* N√∫t Mute/Unmute */}
      <button
        onClick={toggleMute}
        className="bg-pink-400 hover:bg-pink-500 text-white p-2 rounded-full shadow-lg transition-colors"
        aria-label={isMuted ? "B·∫≠t √¢m thanh" : "T·∫Øt √¢m thanh"}
      >
        {isMuted ? <VolumeX size={16} /> : <Volume2 size={16} />}
      </button>

      {/* Hi·ªÉn th·ªã tr·∫°ng th√°i */}
      {isPlaying && <div className="text-xs text-green-600 text-center font-medium">üéµ ƒêang ph√°t</div>}
    </div>
  )
}
